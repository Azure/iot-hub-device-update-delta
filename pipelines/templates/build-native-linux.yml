# File: build_native_linux.yml
parameters:
# We could make this default to '', but then we could accidentally publish a standard package.
# Better to require explicit setting to '' to elect for this behavior.
- name: version_suffix
  type: string

# Optional Parameters
- name: build_platform
  type: string
  default: x64
- name: build_configuration
  type: string
  default: 'Release'
- name: publish
  type: boolean
  default: true
- name: copy_output
  type: boolean
  default: false
- name: copy_output_binaries
  type: string
  default: ''
- name: copy_output_packages
  type: string
  default: ''
- name: one_branch_signing
  type: boolean
  default: false

steps:
  - template: /pipelines/variables/get-version-variables.yml@self

  - task: Bash@3
    displayName: 'Install Dependencies for ${{ parameters.build_platform }}'
    inputs:
      filePath: $(Build.SourcesDirectory)/src/native/install_dependencies.sh
      arguments: ${{ parameters.build_platform }}-linux
      workingDirectory: $(Build.SourcesDirectory)/src/native

  - task: Bash@3
    displayName: 'Show installed packages'
    inputs:
      targetType: inline
      script: apt list --installed

  - task: Bash@3
    displayName: 'Setup VCPKG (${{ parameters.build_platform }}-${{ parameters.build_configuration }})'
    inputs:
      filePath: $(Build.SourcesDirectory)/src/native/build.sh
      arguments: ${{ parameters.build_platform }}-linux ${{ parameters.build_configuration }} vcpkg
      workingDirectory: $(Build.SourcesDirectory)/src/native

  - task: Bash@3
    displayName: 'CMake (${{ parameters.build_platform }}-${{ parameters.build_configuration }})'
    inputs:
      filePath: $(Build.SourcesDirectory)/src/native/build.sh
      arguments: ${{ parameters.build_platform }}-linux ${{ parameters.build_configuration }} cmake $(semver_version)
      workingDirectory: $(Build.SourcesDirectory)/src/native

  - task: Bash@3
    displayName: 'Dump CMake Dir Before Build'
    inputs:
      targetType: inline
      script: tree $(Build.SourcesDirectory)/src/native/out.linux/

  - task: Bash@3
    displayName: 'Build (${{ parameters.build_platform }}-${{ parameters.build_configuration }})'
    inputs:
      filePath: $(Build.SourcesDirectory)/src/native/build.sh
      arguments: ${{ parameters.build_platform }}-linux ${{ parameters.build_configuration }} build
      workingDirectory: $(Build.SourcesDirectory)/src/native

  - task: Bash@3
    displayName: 'Dump CMake Dir After Build'
    inputs:
      targetType: inline
      script: tree $(Build.SourcesDirectory)/src/native/out.linux/

  - ${{ if parameters.publish }}:
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.SourcesDirectory)/src/native/out.linux/build/${{ parameters.build_platform }}-linux/${{ parameters.build_configuration }}/bin'
        artifactType: 'pipeline'
        artifactName: 'native-binaries.${{ parameters.build_platform }}-linux.${{ parameters.build_configuration }}'
      displayName: 'Publish Native Binaries ${{ parameters.build_platform }}-linux ${{ parameters.build_configuration }}'

  - ${{ if parameters.publish }}:
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.SourcesDirectory)/src/native/out.linux/build/${{ parameters.build_platform }}-linux/${{ parameters.build_configuration }}/test/bin'
        artifactType: 'pipeline'
        artifactName: 'native-test-binaries.${{ parameters.build_platform }}-linux.${{ parameters.build_configuration }}'
      displayName: 'Publish Native Test Binaries ${{ parameters.build_platform }}-linux ${{ parameters.build_configuration }}'

  - task: Bash@3
    displayName: 'Run Tests (${{ parameters.build_configuration }})'
    inputs:
      filePath: $(Build.SourcesDirectory)/src/native/run_tests.sh
      arguments: ${{ parameters.build_configuration }} ${{ parameters.build_platform }}
      workingDirectory: $(Build.SourcesDirectory)/src/native

  - ${{ if parameters.copy_output }}:
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)/src/native/out.linux/build/${{ parameters.build_platform }}-linux/${{ parameters.build_configuration }}/bin'
        Contents: '*'
        TargetFolder: ${{ parameters.copy_output_binaries }}

  - task: Bash@3
    displayName: 'Create debian package'
    inputs:
      targetType: inline
      script: |
        cd $(Build.SourcesDirectory)/src/native/out.linux/build/${{ parameters.build_platform }}-linux/${{ parameters.build_configuration }}
        cpack --config CPackConfig.cmake

  - ${{ if parameters.one_branch_signing }}:
    - task: onebranch.pipeline.signing@1 # https://aka.ms/obpipelines/signing
      displayName: 'Sign debian package'
      inputs:
        command: 'sign'
        signing_profile: 'CP-459159-pgpdetached'
        signing_environment: 'azure-ado'
        files_to_sign: '**/*.deb'
        SourceFolder: '$(Build.SourcesDirectory)/src/native/out.linux/build/${{ parameters.build_platform }}-linux/${{ parameters.build_configuration }}/_packages'

  - ${{ if parameters.copy_output }}:
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)/src/native/out.linux/build/${{ parameters.build_platform }}-linux/${{ parameters.build_configuration }}/_packages'
        Contents: '*.deb'
        TargetFolder: ${{ parameters.copy_output_packages }}

  - ${{ if parameters.publish }}:
    - task: CopyFiles@2
      displayName: 'Copy Debian Package before publish'
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)/src/native/out.linux/build/${{ parameters.build_platform }}-linux/${{ parameters.build_configuration }}/_packages'
        Contents: '*.deb'
        TargetFolder: $(Build.ArtifactStagingDirectory)/debian-package

  - ${{ if parameters.publish }}:
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: $(Build.ArtifactStagingDirectory)/debian-package
        artifactType: 'pipeline'
        artifactName: 'native-debian-package.${{ parameters.build_platform }}-linux.${{ parameters.build_configuration }}'
      displayName: 'Publish Debian Package'